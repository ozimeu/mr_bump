#!/usr/bin/env ruby
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Script to tag releases and update changelogs
require 'optparse'

require 'mr_bump'
require 'mr_bump/git_api'

def menu(text)
  valid_options = text.scan(/\[(\w)\]/).flatten.uniq
  loop do
    print text + ': '
    choice = STDIN.gets.chomp.upcase
    if valid_options.include? choice
      yield(choice)
      break
    else
      puts "I'm sorry Dave; I'm afraid I can't do that."
    end
  end
end

def editor
  edit = `git config core.editor`.strip
  edit =  ENV['GIT_EDITOR'] if edit.empty?
  edit || 'nano'
end

def options
  @options ||= begin
    dict = { dryrun: false }
    OptionParser.new do |parser|
      parser.on('-n', '--dry-run',
                'Make no changes to git state, and change some fatal errors to warnings') do
        dict[:dryrun] = true
      end
    end.parse!
    dict.freeze
  end
end

def run(cmd)
  if options[:dryrun]
    puts "dry-run: `#{cmd}`"
    return true
  else
    system(cmd)
  end
end

head_tag = MrBump.all_tags.detect { |tag| tag.casecmp('HEAD').zero? }
if head_tag
  puts 'You have a tag called "HEAD". This interferes with both mr_bump and git.'
  puts 'Would you like to remove it?'
  menu '[F]ix and continue / [E]xit mr_bump' do |choice|
    if choice == 'F'
      run("git tag -d #{head_tag}")
    else
      exit 1
    end
  end
end

release = MrBump.on_release_branch?
master = MrBump.on_master_branch?
develop = MrBump.on_develop_branch?

changelog = "#{`git rev-parse --show-toplevel`.strip}/CHANGELOG.md"

unless release || master || develop
  puts 'Need to be on either release or master branch'
  exit 1
end

unless master || develop || MrBump.current_branch.to_s == MrBump.uat_branch
  puts "On release branch '#{MrBump.current_branch}'. " \
       "Expected release branch '#{MrBump.uat_branch}'"
  exit 1
end

unless MrBump.config_file['github_api_token']
  puts "Couldn't find a github API token in configuration files"
  puts "Please obtain a github token by following the guide at\n" \
       "  https://help.github.com/articles/creating-an-access-token-for-command-line-use/\n" \
       "and add it with the 'github_api_token:' option"
  exit 1
end

unless develop
  puts 'Have you already closed your PR?'

  github_client = MrBump::GitApi.new(MrBump.config_file['github_api_token'])
  menu '[Y]es / [N]o' do |choice|
    if choice == 'N'
      puts 'Here are the 10 most recent PRs in your repo:'
      puts github_client.sorted_prs(MrBump.git_config.path)
      loop do
        print 'Enter the PR number to merge : '
        pr_id = STDIN.gets.chomp
        if options[:dryrun]
          puts "dryrun: Would merge ##{pr_id}"
        else
          github_client.merge_pr(MrBump.git_config.path, pr_id)
        end
        break
      end
    end
  end
end

unless options[:dryrun] || system('git fetch --tags > /dev/null 2>&1')
  puts 'Failed to update remotes. (Connectivity problems?)'
  exit 1
end

unless `git rev-parse @` == `git rev-parse @{u}`
  puts 'Not up to date with origin! Please run git pull'
  exit 1 unless options[:dryrun]
end

unless MrBump.all_tagged_versions.include? MrBump.current_uat_major
  base_sha = `git merge-base #{MrBump.uat_branch} develop`

  puts "Missing tag for version #{MrBump.current_uat_major}. Suggesting commit #{base_sha[0...8]}"
  puts "\t#{`git log --format="(%ci) %cn - %s" -n 1 #{base_sha}`}"
  puts 'Would you like to tag this commit?'
  menu '[Y]es / [N]o' do |choice|
    exit 1 if choice == 'N'
  end
  run("git tag #{MrBump.current_uat_major} #{base_sha}")
end

unless File.file?(changelog)
  puts "Couldn't find CHANGELOG.md at '#{changelog}'."
  exit 1
end

if MrBump.release_stale?
  if release
    puts 'Error: Master branch contains commits from the release branch.'
    puts 'This means the release branch has been merged, and a new release branch needs to be made.'
    puts 'Unable to continue on old release branch.'
    exit 1
  elsif master
    puts 'WARNING: Master branch contains commits from the release branch.'
  end
end

last_release = MrBump.last_release
unless last_release
  if master
    puts "Couldn't detect the version of the master branch. " \
         'At least one tagged version with version less than the current release version ' \
         "(#{MrBump.current_uat_major}) needs to exist"
  else
    puts "Couldn't detect the version of this branch. "
  end
  exit 1
end

new_release = MrBump.next_release
if develop
  new_branch = MrBump.release_branch_for_version(new_release)
  print "You are about to cut a release branch. If you are sure you want to do this type: \n" \
        "      #{new_branch}\n" \
        'Here: '
  user_inp = STDIN.readline
  exit 1 unless user_inp.strip == new_branch
end

changes = MrBump.change_log_items_for_range(last_release, MrBump.current_branch).map(&:to_md)
changes = changes.join("\n")
md_changes = "# #{new_release}\n#{changes}\n\n"

puts "You are bumping from version '#{last_release}' to '#{new_release}'"
puts ''
puts 'Changelog additions'
puts '----------'
puts md_changes
puts '----------'

menu '[A]ccept these changes / Manually [E]dit / [C]ancel Release' do |choice|
  if choice == 'C'
    exit 1
  elsif choice == 'E'
    tempfile = Tempfile.new('CHANGELOG')
    tempfile.write(changes)
    tempfile.close
    system "#{editor} #{tempfile.path}"
    changes = File.open(tempfile.path, 'r').read.rstrip
    md_changes = "# #{new_release}\n#{changes}\n\n"
    puts 'Modified Changelog additions'
    puts '----------'
    puts md_changes
    puts '----------'

    menu '[A]ccept modified changes / [C]ancel Release' do |cancel|
      exit 1 if cancel == 'C'
    end
  end

  MrBump.file_prepend(changelog, md_changes) unless options[:dryrun]
end

push_branch_cmd = develop ? "git push --set-upstream origin #{new_branch}" : 'git push'

if (!develop || run("git checkout -b #{new_branch}")) &&
   run("git commit -m 'Bump version to #{new_release}' -- #{changelog}") &&
   run("git tag #{new_release}") &&
   run(push_branch_cmd) &&
   run("git push origin :refs/tags/#{new_release}")
  MrBump.slack_notifier(new_release, changes) unless options[:dryrun]

  branch_type = master ? 'master' : 'release'
  post_bump = MrBump.config_file.fetch('post_bump', {})
  bump_cmds = [
    develop ? post_bump['develop'] : nil,
    post_bump[branch_type]
  ].flatten.compact

  unless bump_cmds.empty?
    puts 'Would you like to execute the following post bump commands?'
    bump_cmds.each { |cmd| puts "  #{cmd}" }
    menu '[Y]es execute / [N]o Im done' do |choice|
      bump_cmds.each { |cmd| run(cmd) } if choice == 'Y'
    end
  end
else
  puts "Bump Failed :'("
  exit 1
end
