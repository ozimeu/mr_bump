#!/usr/bin/env ruby
# Small script to tag releases and update changelogs
require 'mr_bump'

release = !MrBump.current_branch[/^release/].nil?
master = !MrBump.current_branch[/^master$/].nil?

unless release || master
  puts 'Need to be on either release or master branch'
  exit 1
end

unless system('git remote update > /dev/null 2>&1')
  puts 'Failed to update remotes. (Connectivity problems?)'
  exit 1
end

unless `git rev-parse @` == `git rev-parse @{u}`
  puts 'Not up to date with origin! Please run git pull'
  exit 1
end

unless File.file?('CHANGELOG.md')
  puts "Couldn't find CHANGELOG.md. ensure you are in the root of the git checkout"
  exit 1
end

if release
  last_release = MrBump.current_uat
  current_uat_major = MrBump.current_uat_major
  changes = MrBump.change_log_items_for_range(last_release, "release/#{current_uat_major}")
else
  last_release = MrBump.current_master
  changes = MrBump.change_log_items_for_range(last_release, 'master')
end

new_release = last_release.bump_patch
changes = changes.join('')
md_changes = "# #{new_release}#{changes}\n\n"

puts 'Changelog additions'
puts '----------'
puts md_changes
puts '----------'

loop do
  print '[A]ccept these changes / Manually [E]dit / [C]ancel Release : '
  choice = gets.chomp.upcase

  case choice
  when 'A'
    MrBump.file_prepend('CHANGELOG.md', md_changes)
    break
  when 'E'
    MrBump.file_prepend('CHANGELOG.md', md_changes)
    system 'nano CHANGELOG.md'
    loop do
      log = File.open('CHANGELOG.md', 'r').read
      md_changes = log.split("\n\n").first.split("\n").drop(1)
      puts 'Modified Changelog additions'
      puts '----------'
      puts md_changes
      puts '----------'
      print '[A]ccept modified changes / [C]ancel Release : '
      choice2 = gets.chomp.upcase
      if choice2 == 'C'
        exit 1
      elsif choice2 == 'A'
        break
      else
        puts "I'm sorry Dave; I'm afraid I can't do that."
      end
    end
    break
  when 'C'
    exit 1
  else
    puts "I'm sorry Dave; I'm afraid I can't do that."
  end
end

`git commit -m 'Bump version to #{new_release}' CHANGELOG.md`
`git tag #{new_release}`
`git push && git push --tags`

MrBump.slack_notifier(new_release, md_changes.join("\n"))

config_file = MrBump.config_file()
branch_type = release ? "release" : 'master'
bump_cmd_exists = config_file.key?('post_bump') &&
                  config_file['post_bump'].key?(branch_type)
if bump_cmd_exists
  loop do
    puts 'Would you like to execute post bump commands? '
    print '[Y]es execute / [N]o Im done : '
    choice = gets.chomp.upcase

    case choice
    when 'Y'
      post_command = config_file['post_bump'][branch_type]
      system post_command
      break
    when 'N'
      break
    else
      puts "I'm sorry Dave; I'm afraid I can't do that."
    end
  end
end
