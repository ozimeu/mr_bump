#!/usr/bin/env ruby
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Small script to tag releases and update changelogs
require 'mr_bump'
require 'mr_bump/git_api'

def menu(text, valid_options, &block)
  loop do
    print text + ': '
    choice = gets.chomp.upcase
    if valid_options.include? choice
      block.call(choice)
      break
    else
      puts "I'm sorry Dave; I'm afraid I can't do that."
    end
  end
end

release = !MrBump.current_branch[/^release/].nil?
master = !MrBump.current_branch[/^master$/].nil?

changelog = "#{`git rev-parse --show-toplevel`}/CHANGELOG.md"

unless release || master
  puts 'Need to be on either release or master branch'
  exit 1
end

unless master || MrBump.current_branch.to_s == "release/#{MrBump.current_uat_major}"
  puts "On release branch '#{MrBump.current_branch}'. " \
       "Expected release branch 'release/#{MrBump.current_uat_major}'"
  exit 1
end

puts 'Have you already closed your PR?'

menu '[Y]es / [N]o', %w(Y N) do |choice|
  if choice == 'N'
    puts 'Here are the 10 most recent PRs in your repo:'
    puts MrBump::GitApi.sorted_prs(MrBump.git_config.path)
    loop do
      print 'Enter the PR number to merge : '
      pr_id = gets.chomp
      MrBump::GitApi.merge_pr(MrBump.git_config.path, pr_id)
      break
    end
  end
end

unless system('git remote update > /dev/null 2>&1')
  puts 'Failed to update remotes. (Connectivity problems?)'
  exit 1
end

unless `git rev-parse @` == `git rev-parse @{u}`
  puts 'Not up to date with origin! Please run git pull'
  exit 1
end

unless MrBump.all_tagged_versions.include? MrBump.current_uat_major
  base_sha = `git merge_base release/#{MrBump.current_uat_major} develop`

  puts "Missing tag for version #{MrBump.current_uat_major}. Suggesting commit #{base_sha[0...8]}"
  puts "\t#{`git log --format="(%ci) %cn - %s" -n 1 #{base_sha}`}"
  puts 'Would you like to tag this commit?'
  menu '[Y]es / [N]o', %w(Y N) do |choice|
    exit 1 if choice == 'N'
  end
  `git tag #{MrBump.current_uat_major} #{base_sha}`
end

unless File.file?(changelog)
  puts "Couldn't find CHANGELOG.md at '#{changelog}'."
  exit 1
end

if release
  last_release = MrBump.current_uat
  current_uat_major = MrBump.current_uat_major
  changes = MrBump.change_log_items_for_range(last_release, "release/#{current_uat_major}")
else
  last_release = MrBump.current_master
  changes = MrBump.change_log_items_for_range(last_release, 'master')
end

new_release = last_release.bump_patch
changes = changes.join("\n")
md_changes = "# #{new_release}\n#{changes}\n\n"

puts 'Changelog additions'
puts '----------'
puts md_changes
puts '----------'

menu '[A]ccept these changes / Manually [E]dit / [C]ancel Release', %w(A E C) do |choice|
  if choice == 'C'
    exit 1
  elsif choice == 'E'
    tempfile = Tempfile.new('CHANGELOG')
    tempfile.write(changes)
    tempfile.close
    system "nano #{tempfile.path}"
    changes = File.open(tempfile.path, 'r').read.rstrip
    md_changes = "# #{new_release}\n#{changes}\n\n"
    puts 'Modified Changelog additions'
    puts '----------'
    puts md_changes
    puts '----------'

    menu '[A]ccept modified changes / [C]ancel Release', %w(A C) do |cancel|
      exit 1 if cancel == 'C'
    end
  end

  MrBump.file_prepend(changelog, md_changes)
end

`git commit -m 'Bump version to #{new_release}' #{changelog}`
`git tag #{new_release}`
`git push && git push --tags`

MrBump.slack_notifier(new_release, changes)

config_file = MrBump.config_file()
branch_type = release ? "release" : 'master'
bump_cmd_exists = config_file.key?('post_bump') &&
                  config_file['post_bump'].key?(branch_type)
if bump_cmd_exists
  puts 'Would you like to execute post bump commands? '
  menu '[Y]es execute / [N]o Im done', %w(Y N) do |choice|
    system(config_file['post_bump'][branch_type]) if choice == 'Y'
  end
end
