#!/usr/bin/env ruby
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Script to tag releases and update changelogs
require 'optparse'

require 'mr_bump'
require 'mr_bump/git_api'

def menu(text)
  valid_options = text.scan(/\[(\w)\]/).flatten.uniq
  loop do
    print text + ': '
    choice = gets.chomp.upcase
    if valid_options.include? choice
      yield(choice)
      break
    else
      puts "I'm sorry Dave; I'm afraid I can't do that."
    end
  end
end

options = {
  dryrun: false
}
OptionParser.new do |parser|
  parser.on(
    '-n', '--dry-run',
    'Make no changes to git state, and change some fatal errors to warnings'
  ) do
    options[:dryrun] = true
  end
end.parse!

head_tag = all_tags.select { |tag| tag.casecmp('HEAD').zero? }
if head_tag
  puts 'You have a tag called "HEAD". This interferes with both mr_bump and git.'
  puts 'Would you like to remove it?'
  menu '[F]ix and continue / [E]xit mr_bump' do |choice|
    if choice == 'F'
      `git tag -d #{head_tag}`
    else
      exit 1
    end
  end
end

release = MrBump.on_release_branch?
master = MrBump.on_master_branch?

changelog = "#{`git rev-parse --show-toplevel`.strip}/CHANGELOG.md"

unless release || master
  puts 'Need to be on either release or master branch'
  exit 1
end

unless master || MrBump.current_branch.to_s == MrBump.uat_branch
  puts "On release branch '#{MrBump.current_branch}'. " \
       "Expected release branch '#{MrBump.uat_branch}'"
  exit 1
end

unless MrBump.config_file['github_api_token']
  puts "Couldn't find a github API token in configuration files"
  puts "Please obtain a github token by following the guide at\n" \
       "  https://help.github.com/articles/creating-an-access-token-for-command-line-use/\n" \
       "and add it with the 'github_api_token:' option"
  exit 1
end

puts 'Have you already closed your PR?'

github_client = MrBump::GitApi.new(MrBump.config_file['github_api_token'])
menu '[Y]es / [N]o' do |choice|
  if choice == 'N'
    puts 'Here are the 10 most recent PRs in your repo:'
    puts github_client.sorted_prs(MrBump.git_config.path)
    loop do
      print 'Enter the PR number to merge : '
      pr_id = gets.chomp
      if options[:dryrun]
        puts "dryrun: Would merge ##{pr_id}"
      else
        github_client.merge_pr(MrBump.git_config.path, pr_id)
      end
      break
    end
  end
end

unless options[:dryrun] || system('git remote update > /dev/null 2>&1')
  puts 'Failed to update remotes. (Connectivity problems?)'
  exit 1
end

unless `git rev-parse @` == `git rev-parse @{u}`
  if options[:dryrun]
    puts 'WARNING! Not up to date with origin! Please run git pull'
  else
    puts 'Not up to date with origin! Please run git pull'
    exit 1
  end
end

unless MrBump.all_tagged_versions.include? MrBump.current_uat_major
  base_sha = `git merge-base #{MrBump.uat_branch} develop`

  puts "Missing tag for version #{MrBump.current_uat_major}. Suggesting commit #{base_sha[0...8]}"
  puts "\t#{`git log --format="(%ci) %cn - %s" -n 1 #{base_sha}`}"
  puts 'Would you like to tag this commit?'
  menu '[Y]es / [N]o' do |choice|
    exit 1 if choice == 'N'
  end
  `git tag #{MrBump.current_uat_major} #{base_sha}`
end

unless File.file?(changelog)
  puts "Couldn't find CHANGELOG.md at '#{changelog}'."
  exit 1
end

if release
  last_release = MrBump.current_uat
  changes = MrBump.change_log_items_for_range(last_release, MrBump.uat_branch)
else
  last_release = MrBump.current_master
  unless last_release
    puts "Couldn't detect the version of the master branch. " \
         'At least one tagged version with version less than the current release version ' \
         "(#{MrBump.current_uat_major}) needs to exist"
    exit 1
  end
  changes = MrBump.change_log_items_for_range(last_release, 'master')
end

new_release = last_release.bump_patch
changes = changes.join("\n")
md_changes = "# #{new_release}\n#{changes}\n\n"

puts 'Changelog additions'
puts '----------'
puts md_changes
puts '----------'

menu '[A]ccept these changes / Manually [E]dit / [C]ancel Release' do |choice|
  if choice == 'C'
    exit 1
  elsif choice == 'E'
    tempfile = Tempfile.new('CHANGELOG')
    tempfile.write(changes)
    tempfile.close
    system "nano #{tempfile.path}"
    changes = File.open(tempfile.path, 'r').read.rstrip
    md_changes = "# #{new_release}\n#{changes}\n\n"
    puts 'Modified Changelog additions'
    puts '----------'
    puts md_changes
    puts '----------'

    menu '[A]ccept modified changes / [C]ancel Release' do |cancel|
      exit 1 if cancel == 'C'
    end
  end

  MrBump.file_prepend(changelog, md_changes) unless options[:dryrun]
end

if options[:dryrun]
  puts "dry-run: `git commit -m 'Bump version to #{new_release}' -- #{changelog}`"
  puts "dry-run: `git tag #{new_release}`"
  puts 'dry-run: git push && git push --tags`'
else
  `git commit -m 'Bump version to #{new_release}' -- #{changelog}`
  `git tag #{new_release}`
  `git push && git push --tags`
  MrBump.slack_notifier(new_release, changes)
end

config_file = MrBump.config_file()
branch_type = release ? 'release' : 'master'
bump_cmd_exists = config_file.key?('post_bump') &&
                  config_file['post_bump'].key?(branch_type)
if bump_cmd_exists
  puts 'Would you like to execute post bump commands? '
  menu '[Y]es execute / [N]o Im done' do |choice|
    if choice == 'Y'
      if options[:dryrun]
        puts "dry-run: `#{config_file['post_bump'][branch_type]}`"
      else
        system(config_file['post_bump'][branch_type])
      end
    end
  end
end
